import { HeadLineProps, MetaProps, PostProps, RenderCardProps } from "@/types";
import { logo } from "../public/assets";
import Layout from "@/components/Global/BaseLayout";
import Card from "@/components/Global/Card";
import Loader from "@/components/Global/Loader";
import FormField from "@/components/Global/FormField";
import { FormEvent, useEffect, useState } from "react";
import HeadLine from "@/components/Section/HeadLine";
import Image from "next/image";

const headLine: HeadLineProps = {
  title: "The Community Showcase",
  subTitle:
    "Browse through a collection of imaginative and visually stunning images generated by DALL-E AI",
};

const meta: MetaProps = {
  title: "PicSynth | Homepage",
  description: "Project portofolio integrate with DALL-E.",
  favicon: logo.src,
  type: "website",
};

const RenderCards = ({ data, title }: RenderCardProps) => {
  if (data?.length > 0) {
    return data.map((post: any) => <Card key={post._id} {...post} />);
  }

  return (
    <h2 className="mt-5 font-bold text-[#6449ff] text-base uppercase">
      {title}
    </h2>
  );
};

export default function Home() {
  const [loading, setLoading] = useState<boolean>(false);
  const [allPost, setAllPost] = useState<any>();

  const [searchText, setSearchText] = useState<string>("");
  const [searchedResults, setSearchedResults] = useState<any>(null);
  const [searchTimeout, setSearchTimeout] = useState<any>(null);

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);
      try {
        const response = await fetch(
          "https://be-picsynth.vercel.app/api/post",
          {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          }
        );

        if (response.ok) {
          const result = await response.json();

          setAllPost(result.data.reverse());
        }
      } catch (err) {
        alert(err);
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);

  const handleSearchChange = (
    e: FormEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    clearTimeout(searchTimeout);
    setSearchText(e.currentTarget.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPost.filter(
          (item: PostProps) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500)
    );
  };

  return (
    <Layout customMeta={meta}>
      <HeadLine title={headLine.title} subTitle={headLine.subTitle} />

      <div className="mt-16">
        <FormField
          labelName="Search Post"
          type="text"
          name="text"
          placeholder="Search something..."
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className="my-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-base mb-3">
                Showing Resuls for{" "}
                <span className="text-[#222328]">{searchText}</span>:
              </h2>
            )}
            <div className="grid gap-3 grid-cols-1 lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2">
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="No Search Results Found"
                />
              ) : (
                <RenderCards data={allPost} title="No Posts Yet" />
              )}
            </div>
          </>
        )}
      </div>
    </Layout>
  );
}
